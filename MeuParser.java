
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MeuParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public MeuParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MeuParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MeuParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\013\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\003\005\000\002\003\004\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\027\000\010\004\010\006\004\015\007\001\002\000" +
    "\010\004\010\006\004\015\007\001\002\000\020\005\012" +
    "\006\015\007\013\010\016\011\017\012\020\014\030\001" +
    "\002\000\004\002\027\001\002\000\010\004\010\006\004" +
    "\015\007\001\002\000\022\005\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\012\ufff7\014\ufff7\016\ufff7\001\002\000\020" +
    "\005\012\006\015\007\013\010\016\011\017\012\020\016" +
    "\014\001\002\000\010\004\010\006\004\015\007\001\002" +
    "\000\010\004\010\006\004\015\007\001\002\000\022\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\014\ufff8" +
    "\016\ufff8\001\002\000\010\004\010\006\004\015\007\001" +
    "\002\000\010\004\010\006\004\015\007\001\002\000\010" +
    "\004\010\006\004\015\007\001\002\000\010\004\010\006" +
    "\004\015\007\001\002\000\022\005\ufff9\006\ufff9\007\ufff9" +
    "\010\ufff9\011\ufff9\012\020\014\ufff9\016\ufff9\001\002\000" +
    "\022\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\020" +
    "\014\ufffa\016\ufffa\001\002\000\022\005\ufffb\006\ufffb\007" +
    "\ufffb\010\ufffb\011\ufffb\012\020\014\ufffb\016\ufffb\001\002" +
    "\000\022\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012" +
    "\020\014\ufffe\016\ufffe\001\002\000\022\005\ufffc\006\ufffc" +
    "\007\ufffc\010\ufffc\011\ufffc\012\020\014\ufffc\016\ufffc\001" +
    "\002\000\022\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff" +
    "\012\020\014\uffff\016\uffff\001\002\000\004\002\001\001" +
    "\002\000\004\002\000\001\002\000\022\005\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\011\ufffd\012\020\014\ufffd\016\ufffd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\027\000\006\002\005\003\004\001\001\000\004\003" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\025\001\001\000\004\003\024\001\001\000\002" +
    "\001\001\000\004\003\023\001\001\000\004\003\022\001" +
    "\001\000\004\003\021\001\001\000\004\003\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MeuParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MeuParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MeuParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public static void main(String[] args) throws Exception {
    Compilador compilador = new Compilador();
    compilador.compilar(args[0]);
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MeuParser$actions {
  private final MeuParser parser;

  /** Constructor */
  CUP$MeuParser$actions(MeuParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MeuParser$do_action_part00000000(
    int                        CUP$MeuParser$act_num,
    java_cup.runtime.lr_parser CUP$MeuParser$parser,
    java.util.Stack            CUP$MeuParser$stack,
    int                        CUP$MeuParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MeuParser$result;

      /* select the action based on the action number */
      switch (CUP$MeuParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-1)).value;
		RESULT = start_val;
              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-1)), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MeuParser$parser.done_parsing();
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= expr PTVIRG 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-1)).value;
		 System.out.println(e); 
              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-1)), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= expr MAIS expr 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$MeuParser$stack.peek()).value;
		 RESULT = a.intValue() + b.intValue(); 
              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= expr MENOS expr 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$MeuParser$stack.peek()).value;
		 RESULT = a.intValue() - b.intValue(); 
              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= MENOS expr 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$MeuParser$stack.peek()).value;
		 RESULT = -a; 
              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-1)), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= expr MULTP expr 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$MeuParser$stack.peek()).value;
		 RESULT = a.intValue() * b.intValue(); 
              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr DIVIS expr 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$MeuParser$stack.peek()).value;
		 RESULT = a.intValue() / b.intValue(); 
              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr RESTO expr 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$MeuParser$stack.peek()).value;
		 RESULT = a.intValue() % b.intValue(); 
              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr POTEN expr 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$MeuParser$stack.peek()).value;
		 
           RESULT = new Integer(
                      (int) Math.pow(
                        a.intValue(), 
                        b.intValue()
                      )
                    );
         
              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= PARENTESQ expr PARENTDIR 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-1)).value;
		 RESULT = a.intValue(); 
              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= INTEIRO 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$MeuParser$stack.peek()).value;
		 RESULT = a.intValue(); 
              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MeuParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MeuParser$do_action(
    int                        CUP$MeuParser$act_num,
    java_cup.runtime.lr_parser CUP$MeuParser$parser,
    java.util.Stack            CUP$MeuParser$stack,
    int                        CUP$MeuParser$top)
    throws java.lang.Exception
    {
              return CUP$MeuParser$do_action_part00000000(
                               CUP$MeuParser$act_num,
                               CUP$MeuParser$parser,
                               CUP$MeuParser$stack,
                               CUP$MeuParser$top);
    }
}

}
